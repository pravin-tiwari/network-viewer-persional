{"version":3,"file":"NetworkCellValue.js","sources":["../../../src/Components/NetworkTable/NetworkCellValue.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport Popover from 'react-popover';\n\nimport { formatValue } from '../../utils';\nimport Styles from './NetworkTableHeader.styles.scss';\nimport { VIEWER_FIELDS } from '../../constants';\n\nconst context = classNames.bind(Styles);\n\nconst NetworkCellValue = ({ datakey, unit, payload }) => {\n  const [isOpen, updateOpen] = useState(false);\n  const displayPopover = () => updateOpen(true);\n  const hidePopover = () => updateOpen(false);\n  const formattedValue = formatValue(datakey, payload[datakey], unit, payload);\n  const shouldDisplayTooltip = (\n    datakey === VIEWER_FIELDS.file.key ||\n    payload.error\n  );\n\n  const getTitle = () => {\n    if (datakey === VIEWER_FIELDS.file.key) {\n      return payload.url;\n    }\n    if (payload.error) {\n      return payload.error;\n    }\n\n    return formattedValue;\n  };\n\n  if (!shouldDisplayTooltip) {\n    return (\n      <td className={context('value-cell', datakey)}>\n        <span className={Styles['value-text']}>\n          {formattedValue}\n        </span>\n      </td>\n    );\n  }\n\n  return (\n    <td className={context('value-cell', datakey)}>\n      <Popover\n        body={<span className={Styles['url-tooltip']}>{getTitle()}</span>}\n        isOpen={isOpen}\n        preferPlace=\"below\"\n      >\n        <span\n          className={Styles['value-text']}\n          onMouseOut={hidePopover}\n          onMouseOver={displayPopover}\n        >\n          {formattedValue}\n        </span>\n      </Popover>\n    </td>\n  );\n};\n\nNetworkCellValue.propTypes = {\n  datakey: PropTypes.string.isRequired,\n  payload: PropTypes.object,\n  unit: PropTypes.string,\n};\n\nNetworkCellValue.defaultProps = {\n  payload: {},\n  unit: null,\n};\n\nexport default NetworkCellValue;\n"],"names":["context","classNames","bind","Styles","NetworkCellValue","datakey","unit","payload","useState","isOpen","updateOpen","displayPopover","hidePopover","formattedValue","formatValue","shouldDisplayTooltip","VIEWER_FIELDS","file","key","error","getTitle","url","propTypes","PropTypes","string","isRequired","object","defaultProps"],"mappings":";;;;;;;;;AASA,IAAMA,OAAO,GAAGC,UAAU,CAACC,IAAX,CAAgBC,MAAhB,CAAhB;;IAEMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAgC;AAAA,MAA7BC,OAA6B,QAA7BA,OAA6B;AAAA,MAApBC,IAAoB,QAApBA,IAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAAA,kBAC1BC,QAAQ,CAAC,KAAD,CADkB;AAAA;AAAA,MAChDC,MADgD;AAAA,MACxCC,UADwC;;AAEvD,MAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,WAAMD,UAAU,CAAC,IAAD,CAAhB;AAAA,GAAvB;;AACA,MAAME,WAAW,GAAG,SAAdA,WAAc;AAAA,WAAMF,UAAU,CAAC,KAAD,CAAhB;AAAA,GAApB;;AACA,MAAMG,cAAc,GAAGC,WAAW,CAACT,OAAD,EAAUE,OAAO,CAACF,OAAD,CAAjB,EAA4BC,IAA5B,EAAkCC,OAAlC,CAAlC;AACA,MAAMQ,oBAAoB,GACxBV,OAAO,KAAKW,aAAa,CAACC,IAAd,CAAmBC,GAA/B,IACAX,OAAO,CAACY,KAFV;;AAKA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAIf,OAAO,KAAKW,aAAa,CAACC,IAAd,CAAmBC,GAAnC,EAAwC;AACtC,aAAOX,OAAO,CAACc,GAAf;AACD;;AACD,QAAId,OAAO,CAACY,KAAZ,EAAmB;AACjB,aAAOZ,OAAO,CAACY,KAAf;AACD;;AAED,WAAON,cAAP;AACD,GATD;;AAWA,MAAI,CAACE,oBAAL,EAA2B;AACzB,wBACE;AAAI,MAAA,SAAS,EAAEf,OAAO,CAAC,YAAD,EAAeK,OAAf;AAAtB,oBACE;AAAM,MAAA,SAAS,EAAEF,MAAM,CAAC,YAAD;AAAvB,OACGU,cADH,CADF,CADF;AAOD;;AAED,sBACE;AAAI,IAAA,SAAS,EAAEb,OAAO,CAAC,YAAD,EAAeK,OAAf;AAAtB,kBACE,oBAAC,OAAD;AACE,IAAA,IAAI,eAAE;AAAM,MAAA,SAAS,EAAEF,MAAM,CAAC,aAAD;AAAvB,OAAyCiB,QAAQ,EAAjD,CADR;AAEE,IAAA,MAAM,EAAEX,MAFV;AAGE,IAAA,WAAW,EAAC;AAHd,kBAKE;AACE,IAAA,SAAS,EAAEN,MAAM,CAAC,YAAD,CADnB;AAEE,IAAA,UAAU,EAAES,WAFd;AAGE,IAAA,WAAW,EAAED;AAHf,KAKGE,cALH,CALF,CADF,CADF;AAiBD;;AAEDT,gBAAgB,CAACkB,SAAjB,GAA6B;AAC3BjB,EAAAA,OAAO,EAAEkB,SAAS,CAACC,MAAV,CAAiBC,UADC;AAE3BlB,EAAAA,OAAO,EAAEgB,SAAS,CAACG,MAFQ;AAG3BpB,EAAAA,IAAI,EAAEiB,SAAS,CAACC;AAHW,CAA7B;AAMApB,gBAAgB,CAACuB,YAAjB,GAAgC;AAC9BpB,EAAAA,OAAO,EAAE,EADqB;AAE9BD,EAAAA,IAAI,EAAE;AAFwB,CAAhC;;;;"}